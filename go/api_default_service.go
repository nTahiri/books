/*
 * Books Store
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * API version: 0.0.1
 * Contact: nabil.tahri@polymtl.ca
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package book

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	DataSource DataSource
}

func getBooks(db DataSource) []*Book {
	return db.GetBooksFromDataSource()
}
func filter(b []*Book, f func(*Book) bool) []*Book {
	r := []*Book{}
	for _, val := range b {
		if f(val) {
			r = append(r, val)
		}
	}
	return r
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// GetBooks - Returns all books
func (s *DefaultApiService) GetBooks() (interface{}, error) {
	// TODO
	books := getBooks(LoadBooks())
	return books, nil
}

// SearchBooks - Search for books with specific filter
func (s *DefaultApiService) SearchBooks(payload SearchPayload) (interface{}, error) {
	books := getBooks(LoadBooks())
	if payload == (SearchPayload{}) {
		return books, nil
	}
	f := func(b *Book) bool {
		return b.SetCriteria(&payload)
	}
	filteredBooks := filter(books, f)
	return filteredBooks, nil
}
