/*
 * Books Store
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * API version: 0.0.1
 * Contact: nabil.tahri@polymtl.ca
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package book

import (
	"strings"
)

const MODERN_YEAR = 1920

type Literature string

const (
	NOT_SPECIFIED Literature = "NOT_SPECIFIED"
	MODERN                   = "MODERN"
	CLASSIC                  = "CLASSIC"
)

func (l *Literature) String() string {
	literature := [...]string{"MODERN", "CLASSIC"}

	x := string(*l)
	for _, v := range literature {
		if v == strings.ToUpper(x) {
			return strings.ToUpper(x)
		}
	}

	return "NOT_SPECIFIED"
}

type Book struct {

	// Name of the author
	Author string `json:"Author,omitempty"`

	Genre string `json:"Genre,omitempty"`

	NumberOfPage int `json:"NumberOfPage,omitempty"`

	YearOfPublication int32 `json:"YearOfPublication,omitempty"`

	Rating int32 `json:"Rating,omitempty"`
}
type SearchPayload struct {

	// Name of the author
	Author string `json:"Author,omitempty"`

	Genre string `json:"Genre,omitempty"`

	NumberOfPage int `json:"NumberOfPage,omitempty"`

	Literature Literature `json:"Literature,omitempty"`
}

func (b *Book) SetCriteria(book *SearchPayload) bool {
	var literature bool
	if book.Literature.String() == MODERN {
		literature = b.YearOfPublication > MODERN_YEAR
	}
	if book.Literature.String() == CLASSIC {
		literature = b.YearOfPublication < MODERN_YEAR
	}
	if book.Literature == NOT_SPECIFIED {
		literature = true
	}

	return b.Author == book.Author || b.Genre == book.Genre || b.NumberOfPage == book.NumberOfPage || literature
}
